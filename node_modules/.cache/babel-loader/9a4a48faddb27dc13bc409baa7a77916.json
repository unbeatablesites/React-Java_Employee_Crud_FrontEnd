{"ast":null,"code":"'use strict'; // Load Date class extensions\n\nvar CronDate = require('./date'); // Get Number.isNaN or the polyfill\n\n\nvar safeIsNaN = require('is-nan');\n/**\n * Cron iteration loop safety limit\n */\n\n\nvar LOOP_LIMIT = 10000;\n/**\n * Detect if input range fully matches constraint bounds\n * @param {Array} range Input range\n * @param {Array} constraints Input constraints\n * @returns {Boolean}\n * @private\n */\n\nfunction isWildcardRange(range, constraints) {\n  if (range instanceof Array && !range.length) {\n    return false;\n  }\n\n  if (constraints.length !== 2) {\n    return false;\n  }\n\n  return range.length === constraints[1] - (constraints[0] < 1 ? -1 : 0);\n}\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\n\n\nfunction CronExpression(fields, options) {\n  this._options = options;\n  this._utc = options.utc || false;\n  this._tz = this._utc ? 'UTC' : options.tz;\n  this._currentDate = new CronDate(options.currentDate, this._tz);\n  this._startDate = options.startDate ? new CronDate(options.startDate, this._tz) : null;\n  this._endDate = options.endDate ? new CronDate(options.endDate, this._tz) : null;\n  this._fields = fields;\n  this._isIterator = options.iterator || false;\n  this._hasIterated = false;\n  this._nthDayOfWeek = options.nthDayOfWeek || 0;\n}\n/**\n * Field mappings\n * @type {Array}\n */\n\n\nCronExpression.map = ['second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek'];\n/**\n * Prefined intervals\n * @type {Object}\n */\n\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n/**\n * Fields constraints\n * @type {Array}\n */\n\nCronExpression.constraints = [[0, 59], // Second\n[0, 59], // Minute\n[0, 23], // Hour\n[1, 31], // Day of month\n[1, 12], // Month\n[0, 7] // Day of week\n];\n/**\n * Days in month\n * @type {number[]}\n */\n\nCronExpression.daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/**\n * Field aliases\n * @type {Object}\n */\n\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n/**\n * Field defaults\n * @type {Array}\n */\n\nCronExpression.parseDefaults = ['0', '*', '*', '*', '*', '*'];\nCronExpression.standardValidCharacters = /^[\\d|/|*|\\-|,]+$/;\nCronExpression.dayValidCharacters = /^[\\d|/|*|\\-|,|\\?]+$/;\nCronExpression.validCharacters = {\n  second: CronExpression.standardValidCharacters,\n  minute: CronExpression.standardValidCharacters,\n  hour: CronExpression.standardValidCharacters,\n  dayOfMonth: CronExpression.dayValidCharacters,\n  month: CronExpression.standardValidCharacters,\n  dayOfWeek: CronExpression.dayValidCharacters\n};\n/**\n * Parse input interval\n *\n * @param {String} field Field symbolic name\n * @param {String} value Field value\n * @param {Array} constraints Range upper and lower constraints\n * @return {Array} Sequence of sorted values\n * @private\n */\n\nCronExpression._parseField = function _parseField(field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n      value = value.replace(/[a-z]{1,3}/gi, function (match) {\n        match = match.toLowerCase();\n\n        if (typeof aliases[match] !== undefined) {\n          return aliases[match];\n        } else {\n          throw new Error('Cannot resolve alias \"' + match + '\"');\n        }\n      });\n      break;\n  } // Check for valid characters.\n\n\n  if (!CronExpression.validCharacters[field].test(value)) {\n    throw new Error('Invalid characters, got value: ' + value);\n  } // Replace '*' and '?'\n\n\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints.join('-'));\n  } else if (value.indexOf('?') !== -1) {\n    value = value.replace(/\\?/g, constraints.join('-'));\n  } //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param {String} val\n   * @return {Array}\n   * @private\n   */\n\n\n  function parseSequence(val) {\n    var stack = [];\n\n    function handleResult(result) {\n      if (result instanceof Array) {\n        // Make sequence linear\n        for (var i = 0, c = result.length; i < c; i++) {\n          var value = result[i]; // Check constraints\n\n          if (value < constraints[0] || value > constraints[1]) {\n            throw new Error('Constraint error, got value ' + value + ' expected range ' + constraints[0] + '-' + constraints[1]);\n          }\n\n          stack.push(value);\n        }\n      } else {\n        // Scalar value\n        result = +result; // Check constraints\n\n        if (result < constraints[0] || result > constraints[1]) {\n          throw new Error('Constraint error, got value ' + result + ' expected range ' + constraints[0] + '-' + constraints[1]);\n        }\n\n        if (field == 'dayOfWeek') {\n          result = result % 7;\n        }\n\n        stack.push(result);\n      }\n    }\n\n    var atoms = val.split(',');\n\n    if (atoms.length > 1) {\n      for (var i = 0, c = atoms.length; i < c; i++) {\n        handleResult(parseRepeat(atoms[i]));\n      }\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    stack.sort(function (a, b) {\n      return a - b;\n    });\n    return stack;\n  }\n  /**\n   * Parse repetition interval\n   *\n   * @param {String} val\n   * @return {Array}\n   */\n\n\n  function parseRepeat(val) {\n    var repeatInterval = 1;\n    var atoms = val.split('/');\n\n    if (atoms.length > 1) {\n      if (atoms[0] == +atoms[0]) {\n        atoms = [atoms[0] + '-' + constraints[1], atoms[1]];\n      }\n\n      return parseRange(atoms[0], atoms[atoms.length - 1]);\n    }\n\n    return parseRange(val, repeatInterval);\n  }\n  /**\n   * Parse range\n   *\n   * @param {String} val\n   * @param {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n\n\n  function parseRange(val, repeatInterval) {\n    var stack = [];\n    var atoms = val.split('-');\n\n    if (atoms.length > 1) {\n      // Invalid range, return value\n      if (atoms.length < 2) {\n        return +val;\n      }\n\n      if (!atoms[0].length) {\n        if (!atoms[1].length) {\n          throw new Error('Invalid range: ' + val);\n        }\n\n        return +val;\n      } // Validate range\n\n\n      var min = +atoms[0];\n      var max = +atoms[1];\n\n      if (safeIsNaN(min) || safeIsNaN(max) || min < constraints[0] || max > constraints[1]) {\n        throw new Error('Constraint error, got range ' + min + '-' + max + ' expected range ' + constraints[0] + '-' + constraints[1]);\n      } else if (min >= max) {\n        throw new Error('Invalid range: ' + val);\n      } // Create range\n\n\n      var repeatIndex = +repeatInterval;\n\n      if (safeIsNaN(repeatIndex) || repeatIndex <= 0) {\n        throw new Error('Constraint error, cannot repeat at every ' + repeatIndex + ' time.');\n      }\n\n      for (var index = min, count = max; index <= count; index++) {\n        if (repeatIndex > 0 && repeatIndex % repeatInterval === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    }\n\n    return +val;\n  }\n\n  return parseSequence(value);\n};\n\nCronExpression.prototype._applyTimezoneShift = function (currentDate, dateMathVerb, method) {\n  if (method === 'Month' || method === 'Day') {\n    var prevTime = currentDate.getTime();\n    currentDate[dateMathVerb + method]();\n    var currTime = currentDate.getTime();\n\n    if (prevTime === currTime) {\n      // Jumped into a not existent date due to a DST transition\n      if (currentDate.getMinutes() === 0 && currentDate.getSeconds() === 0) {\n        currentDate.addHour();\n      } else if (currentDate.getMinutes() === 59 && currentDate.getSeconds() === 59) {\n        currentDate.subtractHour();\n      }\n    }\n  } else {\n    var previousHour = currentDate.getHours();\n    currentDate[dateMathVerb + method]();\n    var currentHour = currentDate.getHours();\n    var diff = currentHour - previousHour;\n\n    if (diff === 2) {\n      // Starting DST\n      if (this._fields.hour.length !== 24) {\n        // Hour is specified\n        this._dstStart = currentHour;\n      }\n    } else if (diff === 0 && currentDate.getMinutes() === 0 && currentDate.getSeconds() === 0) {\n      // Ending DST\n      if (this._fields.hour.length !== 24) {\n        // Hour is specified\n        this._dstEnd = currentHour;\n      }\n    }\n  }\n};\n/**\n * Find next or previous matching schedule date\n *\n * @return {CronDate}\n * @private\n */\n\n\nCronExpression.prototype._findSchedule = function _findSchedule(reverse) {\n  /**\n   * Match field value\n   *\n   * @param {String} value\n   * @param {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule(value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i] === value;\n      }\n    }\n\n    return sequence[0] === value;\n  }\n  /**\n   * Helps determine if the provided date is the correct nth occurence of the\n   * desired day of week.\n   *\n   * @param {CronDate} date\n   * @param {Number} nthDayOfWeek\n   * @return {Boolean}\n   * @private\n   */\n\n\n  function isNthDayMatch(date, nthDayOfWeek) {\n    if (nthDayOfWeek < 6) {\n      if (date.getDate() < 8 && nthDayOfWeek === 1 // First occurence has to happen in first 7 days of the month\n      ) {\n          return true;\n        }\n\n      var offset = date.getDate() % 7 ? 1 : 0; // Math is off by 1 when dayOfWeek isn't divisible by 7\n\n      var adjustedDate = date.getDate() - date.getDate() % 7; // find the first occurance\n\n      var occurrence = Math.floor(adjustedDate / 7) + offset;\n      return occurrence === nthDayOfWeek;\n    }\n\n    return false;\n  } // Whether to use backwards directionality when searching\n\n\n  reverse = reverse || false;\n  var dateMathVerb = reverse ? 'subtract' : 'add';\n  var currentDate = new CronDate(this._currentDate, this._tz);\n  var startDate = this._startDate;\n  var endDate = this._endDate; // Find matching schedule\n\n  var startTimestamp = currentDate.getTime();\n  var stepCount = 0;\n\n  while (stepCount < LOOP_LIMIT) {\n    stepCount++; // Validate timespan\n\n    if (reverse) {\n      if (startDate && currentDate.getTime() - startDate.getTime() < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    } else {\n      if (endDate && endDate.getTime() - currentDate.getTime() < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    } // Day of month and week matching:\n    //\n    // \"The day of a command's execution can be specified by two fields --\n    // day of month, and day of week.  If  both\t fields\t are  restricted  (ie,\n    // aren't  *),  the command will be run when either field matches the cur-\n    // rent time.  For example, \"30 4 1,15 * 5\" would cause a command to be\n    // run at 4:30 am on the  1st and 15th of each month, plus every Friday.\"\n    //\n    // http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n    //\n\n\n    var dayOfMonthMatch = matchSchedule(currentDate.getDate(), this._fields.dayOfMonth);\n    var dayOfWeekMatch = matchSchedule(currentDate.getDay(), this._fields.dayOfWeek);\n    var isDayOfMonthWildcardMatch = isWildcardRange(this._fields.dayOfMonth, CronExpression.constraints[3]);\n    var isDayOfWeekWildcardMatch = isWildcardRange(this._fields.dayOfWeek, CronExpression.constraints[5]);\n    var currentHour = currentDate.getHours(); // Add or subtract day if select day not match with month (according to calendar)\n\n    if (!dayOfMonthMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if not day of month is set (and no match) and day of week is wildcard\n\n\n    if (!isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch && !dayOfMonthMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if not day of week is set (and no match) and day of month is wildcard\n\n\n    if (isDayOfMonthWildcardMatch && !isDayOfWeekWildcardMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if day of month and week are non-wildcard values and both doesn't match\n\n\n    if (!(isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch) && !dayOfMonthMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if day of week & nthDayOfWeek are set (and no match)\n\n\n    if (this._nthDayOfWeek > 0 && !isNthDayMatch(currentDate, this._nthDayOfWeek)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Match month\n\n\n    if (!matchSchedule(currentDate.getMonth() + 1, this._fields.month)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Month');\n\n      continue;\n    } // Match hour\n\n\n    if (!matchSchedule(currentHour, this._fields.hour)) {\n      if (this._dstStart !== currentHour) {\n        this._dstStart = null;\n\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Hour');\n\n        continue;\n      } else if (!matchSchedule(currentHour - 1, this._fields.hour)) {\n        currentDate[dateMathVerb + 'Hour']();\n        continue;\n      }\n    } else if (this._dstEnd === currentHour) {\n      if (!reverse) {\n        this._dstEnd = null;\n\n        this._applyTimezoneShift(currentDate, 'add', 'Hour');\n\n        continue;\n      }\n    } // Match minute\n\n\n    if (!matchSchedule(currentDate.getMinutes(), this._fields.minute)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Minute');\n\n      continue;\n    } // Match second\n\n\n    if (!matchSchedule(currentDate.getSeconds(), this._fields.second)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n\n      continue;\n    } // Increase a second in case in the first iteration the currentDate was not\n    // modified\n\n\n    if (startTimestamp === currentDate.getTime()) {\n      if (dateMathVerb === 'add' || currentDate.getMilliseconds() === 0) {\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      } else {\n        currentDate.setMilliseconds(0);\n      }\n\n      continue;\n    }\n\n    break;\n  }\n\n  if (stepCount >= LOOP_LIMIT) {\n    throw new Error('Invalid expression, loop limit exceeded');\n  }\n\n  this._currentDate = new CronDate(currentDate, this._tz);\n  this._hasIterated = true;\n  return currentDate;\n};\n/**\n * Find next suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\n\n\nCronExpression.prototype.next = function next() {\n  var schedule = this._findSchedule(); // Try to return ES6 compatible iterator\n\n\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasNext()\n    };\n  }\n\n  return schedule;\n};\n/**\n * Find previous suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\n\n\nCronExpression.prototype.prev = function prev() {\n  var schedule = this._findSchedule(true); // Try to return ES6 compatible iterator\n\n\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasPrev()\n    };\n  }\n\n  return schedule;\n};\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\n\n\nCronExpression.prototype.hasNext = function () {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule();\n\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n/**\n * Check if previous suitable date exists\n *\n * @public\n * @return {Boolean}\n */\n\n\nCronExpression.prototype.hasPrev = function () {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule(true);\n\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param {Number} steps Numbers of steps to iterate\n * @param {Function} callback Optional callback\n * @return {Array} Array of the iterated results\n */\n\n\nCronExpression.prototype.iterate = function iterate(steps, callback) {\n  var dates = [];\n\n  if (steps >= 0) {\n    for (var i = 0, c = steps; i < c; i++) {\n      try {\n        var item = this.next();\n        dates.push(item); // Fire the callback\n\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  } else {\n    for (var i = 0, c = steps; i > c; i--) {\n      try {\n        var item = this.prev();\n        dates.push(item); // Fire the callback\n\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  }\n\n  return dates;\n};\n/**\n * Reset expression iterator state\n *\n * @public\n */\n\n\nCronExpression.prototype.reset = function reset(newDate) {\n  this._currentDate = new CronDate(newDate || this._options.currentDate);\n};\n/**\n * Parse input expression (async)\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @param {Function} [callback]\n */\n\n\nCronExpression.parse = function parse(expression, options, callback) {\n  var self = this;\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  function parse(expression, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.currentDate === 'undefined') {\n      options.currentDate = new CronDate(undefined, self._tz);\n    } // Is input expression predefined?\n\n\n    if (CronExpression.predefined[expression]) {\n      expression = CronExpression.predefined[expression];\n    } // Split fields\n\n\n    var fields = [];\n    var atoms = (expression + '').trim().split(/\\s+/);\n\n    if (atoms.length > 6) {\n      throw new Error('Invalid cron expression');\n    } // Resolve fields\n\n\n    var start = CronExpression.map.length - atoms.length;\n\n    for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n      var field = CronExpression.map[i]; // Field name\n\n      var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n      if (i < start || !value) {\n        // Use default value\n        fields.push(CronExpression._parseField(field, CronExpression.parseDefaults[i], CronExpression.constraints[i]));\n      } else {\n        var val = field === 'dayOfWeek' ? parseNthDay(value) : value;\n        fields.push(CronExpression._parseField(field, val, CronExpression.constraints[i]));\n      }\n    }\n\n    var mappedFields = {};\n\n    for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n      var key = CronExpression.map[i];\n      mappedFields[key] = fields[i];\n    } // Filter out any day of month value that is larger than given month expects\n\n\n    if (mappedFields.month.length === 1) {\n      var daysInMonth = CronExpression.daysInMonth[mappedFields.month[0] - 1];\n\n      if (mappedFields.dayOfMonth[0] > daysInMonth) {\n        throw new Error('Invalid explicit day of month definition');\n      }\n\n      mappedFields.dayOfMonth = mappedFields.dayOfMonth.filter(function (dayOfMonth) {\n        return dayOfMonth <= daysInMonth;\n      });\n    }\n\n    return new CronExpression(mappedFields, options);\n    /**\n     * Parses out the # special character for the dayOfWeek field & adds it to options.\n     *\n     * @param {String} val\n     * @return {String}\n     * @private\n     */\n\n    function parseNthDay(val) {\n      var atoms = val.split('#');\n\n      if (atoms.length > 1) {\n        var nthValue = +atoms[atoms.length - 1];\n\n        if (/,/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `,` ' + 'special characters are incompatible');\n        }\n\n        if (/\\//.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `/` ' + 'special characters are incompatible');\n        }\n\n        if (/-/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `-` ' + 'special characters are incompatible');\n        }\n\n        if (atoms.length > 2 || safeIsNaN(nthValue) || nthValue < 1 || nthValue > 5) {\n          throw new Error('Constraint error, invalid dayOfWeek occurrence number (#)');\n        }\n\n        options.nthDayOfWeek = nthValue;\n        return atoms[0];\n      }\n\n      return val;\n    }\n  }\n\n  return parse(expression, options);\n};\n\nmodule.exports = CronExpression;","map":{"version":3,"sources":["/Users/frankuzoka/Desktop/React-Java_Employee_Crud_FrontEnd/node_modules/cron-parser/lib/expression.js"],"names":["CronDate","require","safeIsNaN","LOOP_LIMIT","isWildcardRange","range","constraints","Array","length","CronExpression","fields","options","_options","_utc","utc","_tz","tz","_currentDate","currentDate","_startDate","startDate","_endDate","endDate","_fields","_isIterator","iterator","_hasIterated","_nthDayOfWeek","nthDayOfWeek","map","predefined","daysInMonth","aliases","month","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","dayOfWeek","sun","mon","tue","wed","thu","fri","sat","parseDefaults","standardValidCharacters","dayValidCharacters","validCharacters","second","minute","hour","dayOfMonth","_parseField","field","value","replace","match","toLowerCase","undefined","Error","test","indexOf","join","parseSequence","val","stack","handleResult","result","i","c","push","atoms","split","parseRepeat","sort","a","b","repeatInterval","parseRange","min","max","repeatIndex","index","count","prototype","_applyTimezoneShift","dateMathVerb","method","prevTime","getTime","currTime","getMinutes","getSeconds","addHour","subtractHour","previousHour","getHours","currentHour","diff","_dstStart","_dstEnd","_findSchedule","reverse","matchSchedule","sequence","isNthDayMatch","date","getDate","offset","adjustedDate","occurrence","Math","floor","startTimestamp","stepCount","dayOfMonthMatch","dayOfWeekMatch","getDay","isDayOfMonthWildcardMatch","isDayOfWeekWildcardMatch","getMonth","getMilliseconds","setMilliseconds","next","schedule","done","hasNext","prev","hasPrev","current","hasIterated","err","iterate","steps","callback","dates","item","reset","newDate","parse","expression","self","trim","start","parseNthDay","mappedFields","key","filter","nthValue","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// Load Date class extensions\nvar CronDate = require('./date');\n\n// Get Number.isNaN or the polyfill\nvar safeIsNaN = require('is-nan');\n\n/**\n * Cron iteration loop safety limit\n */\nvar LOOP_LIMIT = 10000;\n\n/**\n * Detect if input range fully matches constraint bounds\n * @param {Array} range Input range\n * @param {Array} constraints Input constraints\n * @returns {Boolean}\n * @private\n */\nfunction isWildcardRange(range, constraints) {\n  if (range instanceof Array && !range.length) {\n    return false;\n  }\n\n  if (constraints.length !== 2) {\n    return false;\n  }\n\n  return range.length === (constraints[1] - (constraints[0] < 1 ? - 1 : 0));\n}\n\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\nfunction CronExpression (fields, options) {\n  this._options = options;\n  this._utc = options.utc || false;\n  this._tz = this._utc ? 'UTC' : options.tz;\n  this._currentDate = new CronDate(options.currentDate, this._tz);\n  this._startDate = options.startDate ? new CronDate(options.startDate, this._tz) : null;\n  this._endDate = options.endDate ? new CronDate(options.endDate, this._tz) : null;\n  this._fields = fields;\n  this._isIterator = options.iterator || false;\n  this._hasIterated = false;\n  this._nthDayOfWeek = options.nthDayOfWeek || 0;\n}\n\n/**\n * Field mappings\n * @type {Array}\n */\nCronExpression.map = [ 'second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek' ];\n\n/**\n * Prefined intervals\n * @type {Object}\n */\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n\n/**\n * Fields constraints\n * @type {Array}\n */\nCronExpression.constraints = [\n  [ 0, 59 ], // Second\n  [ 0, 59 ], // Minute\n  [ 0, 23 ], // Hour\n  [ 1, 31 ], // Day of month\n  [ 1, 12 ], // Month\n  [ 0, 7 ] // Day of week\n];\n\n/**\n * Days in month\n * @type {number[]}\n */\nCronExpression.daysInMonth = [\n  31,\n  29,\n  31,\n  30,\n  31,\n  30,\n  31,\n  31,\n  30,\n  31,\n  30,\n  31\n];\n\n/**\n * Field aliases\n * @type {Object}\n */\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n\n/**\n * Field defaults\n * @type {Array}\n */\nCronExpression.parseDefaults = [ '0', '*', '*', '*', '*', '*' ];\n\nCronExpression.standardValidCharacters = /^[\\d|/|*|\\-|,]+$/;\nCronExpression.dayValidCharacters = /^[\\d|/|*|\\-|,|\\?]+$/;\nCronExpression.validCharacters = {\n  second: CronExpression.standardValidCharacters,\n  minute: CronExpression.standardValidCharacters,\n  hour: CronExpression.standardValidCharacters,\n  dayOfMonth: CronExpression.dayValidCharacters,\n  month: CronExpression.standardValidCharacters,\n  dayOfWeek: CronExpression.dayValidCharacters,\n}\n\n/**\n * Parse input interval\n *\n * @param {String} field Field symbolic name\n * @param {String} value Field value\n * @param {Array} constraints Range upper and lower constraints\n * @return {Array} Sequence of sorted values\n * @private\n */\nCronExpression._parseField = function _parseField (field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n\n      value = value.replace(/[a-z]{1,3}/gi, function(match) {\n        match = match.toLowerCase();\n\n        if (typeof aliases[match] !== undefined) {\n          return aliases[match];\n        } else {\n          throw new Error('Cannot resolve alias \"' + match + '\"')\n        }\n      });\n      break;\n  }\n\n  // Check for valid characters.\n  if (!(CronExpression.validCharacters[field].test(value))) {\n    throw new Error('Invalid characters, got value: ' + value)\n  }\n\n  // Replace '*' and '?'\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints.join('-'));\n  } else if (value.indexOf('?') !== -1) {\n    value = value.replace(/\\?/g, constraints.join('-'));\n  }\n\n  //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param {String} val\n   * @return {Array}\n   * @private\n   */\n  function parseSequence (val) {\n    var stack = [];\n\n    function handleResult (result) {\n      if (result instanceof Array) { // Make sequence linear\n        for (var i = 0, c = result.length; i < c; i++) {\n          var value = result[i];\n\n          // Check constraints\n          if (value < constraints[0] || value > constraints[1]) {\n            throw new Error(\n                'Constraint error, got value ' + value + ' expected range ' +\n                constraints[0] + '-' + constraints[1]\n            );\n          }\n\n          stack.push(value);\n        }\n      } else { // Scalar value\n        result = +result;\n\n        // Check constraints\n        if (result < constraints[0] || result > constraints[1]) {\n          throw new Error(\n            'Constraint error, got value ' + result + ' expected range ' +\n            constraints[0] + '-' + constraints[1]\n          );\n        }\n\n        if (field == 'dayOfWeek') {\n          result = result % 7;\n        }\n\n        stack.push(result);\n      }\n    }\n\n    var atoms = val.split(',');\n    if (atoms.length > 1) {\n      for (var i = 0, c = atoms.length; i < c; i++) {\n        handleResult(parseRepeat(atoms[i]));\n      }\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    stack.sort(function(a, b) {\n      return a - b;\n    });\n\n    return stack;\n  }\n\n  /**\n   * Parse repetition interval\n   *\n   * @param {String} val\n   * @return {Array}\n   */\n  function parseRepeat (val) {\n    var repeatInterval = 1;\n    var atoms = val.split('/');\n\n    if (atoms.length > 1) {\n      if (atoms[0] == +atoms[0]) {\n        atoms = [atoms[0] + '-' + constraints[1], atoms[1]];\n      }\n      return parseRange(atoms[0], atoms[atoms.length - 1]);\n    }\n\n    return parseRange(val, repeatInterval);\n  }\n\n  /**\n   * Parse range\n   *\n   * @param {String} val\n   * @param {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n  function parseRange (val, repeatInterval) {\n    var stack = [];\n    var atoms = val.split('-');\n\n    if (atoms.length > 1 ) {\n      // Invalid range, return value\n      if (atoms.length < 2) {\n        return +val;\n      }\n\n      if (!atoms[0].length) {\n        if (!atoms[1].length) {\n          throw new Error('Invalid range: ' + val);\n        }\n\n        return +val;\n      }\n\n      // Validate range\n      var min = +atoms[0];\n      var max = +atoms[1];\n\n      if (safeIsNaN(min) || safeIsNaN(max) ||\n          min < constraints[0] || max > constraints[1]) {\n        throw new Error(\n          'Constraint error, got range ' +\n          min + '-' + max +\n          ' expected range ' +\n          constraints[0] + '-' + constraints[1]\n        );\n      } else if (min >= max) {\n        throw new Error('Invalid range: ' + val);\n      }\n\n      // Create range\n      var repeatIndex = +repeatInterval;\n\n      if (safeIsNaN(repeatIndex) || repeatIndex <= 0) {\n        throw new Error('Constraint error, cannot repeat at every ' + repeatIndex + ' time.');\n      }\n\n      for (var index = min, count = max; index <= count; index++) {\n        if (repeatIndex > 0 && (repeatIndex % repeatInterval) === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    }\n\n    return +val;\n  }\n\n  return parseSequence(value);\n};\n\nCronExpression.prototype._applyTimezoneShift = function(currentDate, dateMathVerb, method) {\n  if ((method === 'Month') || (method === 'Day')) {\n    var prevTime = currentDate.getTime();\n    currentDate[dateMathVerb + method]();\n    var currTime = currentDate.getTime();\n    if (prevTime === currTime) {\n      // Jumped into a not existent date due to a DST transition\n      if ((currentDate.getMinutes() === 0) &&\n          (currentDate.getSeconds() === 0)) {\n        currentDate.addHour();\n      } else if ((currentDate.getMinutes() === 59) &&\n                 (currentDate.getSeconds() === 59)) {\n        currentDate.subtractHour();\n      }\n    }\n  } else {\n    var previousHour = currentDate.getHours();\n    currentDate[dateMathVerb + method]();\n    var currentHour = currentDate.getHours();\n    var diff = currentHour - previousHour;\n    if (diff === 2) {\n        // Starting DST\n        if (this._fields.hour.length !== 24) {\n          // Hour is specified\n          this._dstStart = currentHour;\n        }\n      } else if ((diff === 0) &&\n                 (currentDate.getMinutes() === 0) &&\n                 (currentDate.getSeconds() === 0)) {\n        // Ending DST\n        if (this._fields.hour.length !== 24) {\n          // Hour is specified\n          this._dstEnd = currentHour;\n        }\n      }\n  }\n};\n\n\n/**\n * Find next or previous matching schedule date\n *\n * @return {CronDate}\n * @private\n */\nCronExpression.prototype._findSchedule = function _findSchedule (reverse) {\n\n  /**\n   * Match field value\n   *\n   * @param {String} value\n   * @param {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule (value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i] === value;\n      }\n    }\n\n    return sequence[0] === value;\n  }\n\n  /**\n   * Helps determine if the provided date is the correct nth occurence of the\n   * desired day of week.\n   *\n   * @param {CronDate} date\n   * @param {Number} nthDayOfWeek\n   * @return {Boolean}\n   * @private\n   */\n  function isNthDayMatch(date, nthDayOfWeek) {\n    if (nthDayOfWeek < 6) {\n      if (\n        date.getDate() < 8 &&\n        nthDayOfWeek === 1 // First occurence has to happen in first 7 days of the month\n      ) {\n        return true;\n      }\n\n      var offset = date.getDate() % 7 ? 1 : 0; // Math is off by 1 when dayOfWeek isn't divisible by 7\n      var adjustedDate = date.getDate() - (date.getDate() % 7); // find the first occurance\n      var occurrence = Math.floor(adjustedDate / 7) + offset;\n\n      return occurrence === nthDayOfWeek;\n    }\n\n    return false;\n  }\n\n  // Whether to use backwards directionality when searching\n  reverse = reverse || false;\n  var dateMathVerb = reverse ? 'subtract' : 'add';\n\n  var currentDate = new CronDate(this._currentDate, this._tz);\n  var startDate = this._startDate;\n  var endDate = this._endDate;\n\n  // Find matching schedule\n  var startTimestamp = currentDate.getTime();\n  var stepCount = 0;\n\n  while (stepCount < LOOP_LIMIT) {\n    stepCount++;\n\n    // Validate timespan\n    if (reverse) {\n      if (startDate && (currentDate.getTime() - startDate.getTime() < 0)) {\n        throw new Error('Out of the timespan range');\n      }\n    } else {\n      if (endDate && (endDate.getTime() - currentDate.getTime()) < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    }\n\n    // Day of month and week matching:\n    //\n    // \"The day of a command's execution can be specified by two fields --\n    // day of month, and day of week.  If  both\t fields\t are  restricted  (ie,\n    // aren't  *),  the command will be run when either field matches the cur-\n    // rent time.  For example, \"30 4 1,15 * 5\" would cause a command to be\n    // run at 4:30 am on the  1st and 15th of each month, plus every Friday.\"\n    //\n    // http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n    //\n\n    var dayOfMonthMatch = matchSchedule(currentDate.getDate(), this._fields.dayOfMonth);\n    var dayOfWeekMatch = matchSchedule(currentDate.getDay(), this._fields.dayOfWeek);\n\n    var isDayOfMonthWildcardMatch = isWildcardRange(this._fields.dayOfMonth, CronExpression.constraints[3]);\n    var isDayOfWeekWildcardMatch = isWildcardRange(this._fields.dayOfWeek, CronExpression.constraints[5]);\n\n    var currentHour = currentDate.getHours();\n\n    // Add or subtract day if select day not match with month (according to calendar)\n    if (!dayOfMonthMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if not day of month is set (and no match) and day of week is wildcard\n    if (!isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch && !dayOfMonthMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if not day of week is set (and no match) and day of month is wildcard\n    if (isDayOfMonthWildcardMatch && !isDayOfWeekWildcardMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if day of month and week are non-wildcard values and both doesn't match\n    if (!(isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch) &&\n        !dayOfMonthMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Add or subtract day if day of week & nthDayOfWeek are set (and no match)\n    if (\n      this._nthDayOfWeek > 0 &&\n      !isNthDayMatch(currentDate, this._nthDayOfWeek)\n    ) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n      continue;\n    }\n\n    // Match month\n    if (!matchSchedule(currentDate.getMonth() + 1, this._fields.month)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Month');\n      continue;\n    }\n\n    // Match hour\n    if (!matchSchedule(currentHour, this._fields.hour)) {\n      if (this._dstStart !== currentHour) {\n        this._dstStart = null;\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Hour');\n        continue;\n      } else if (!matchSchedule(currentHour - 1, this._fields.hour)) {\n        currentDate[dateMathVerb + 'Hour']();\n        continue;\n      }\n    } else if (this._dstEnd === currentHour) {\n      if (!reverse) {\n        this._dstEnd = null;\n        this._applyTimezoneShift(currentDate, 'add', 'Hour');\n        continue;\n      }\n    }\n\n    // Match minute\n    if (!matchSchedule(currentDate.getMinutes(), this._fields.minute)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Minute');\n      continue;\n    }\n\n    // Match second\n    if (!matchSchedule(currentDate.getSeconds(), this._fields.second)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      continue;\n    }\n\n    // Increase a second in case in the first iteration the currentDate was not\n    // modified\n    if (startTimestamp === currentDate.getTime()) {\n      if ((dateMathVerb === 'add') || (currentDate.getMilliseconds() === 0)) {\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      } else {\n        currentDate.setMilliseconds(0);\n      }\n\n      continue;\n    }\n\n    break;\n  }\n\n  if (stepCount >= LOOP_LIMIT) {\n    throw new Error('Invalid expression, loop limit exceeded');\n  }\n\n  this._currentDate = new CronDate(currentDate, this._tz);\n  this._hasIterated = true;\n\n  return currentDate;\n};\n\n/**\n * Find next suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\nCronExpression.prototype.next = function next () {\n  var schedule = this._findSchedule();\n\n  // Try to return ES6 compatible iterator\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasNext()\n    };\n  }\n\n  return schedule;\n};\n\n/**\n * Find previous suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\nCronExpression.prototype.prev = function prev () {\n  var schedule = this._findSchedule(true);\n\n  // Try to return ES6 compatible iterator\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasPrev()\n    };\n  }\n\n  return schedule;\n};\n\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\nCronExpression.prototype.hasNext = function() {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule();\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n\n/**\n * Check if previous suitable date exists\n *\n * @public\n * @return {Boolean}\n */\nCronExpression.prototype.hasPrev = function() {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule(true);\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param {Number} steps Numbers of steps to iterate\n * @param {Function} callback Optional callback\n * @return {Array} Array of the iterated results\n */\nCronExpression.prototype.iterate = function iterate (steps, callback) {\n  var dates = [];\n\n  if (steps >= 0) {\n    for (var i = 0, c = steps; i < c; i++) {\n      try {\n        var item = this.next();\n        dates.push(item);\n\n        // Fire the callback\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  } else {\n    for (var i = 0, c = steps; i > c; i--) {\n      try {\n        var item = this.prev();\n        dates.push(item);\n\n        // Fire the callback\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  }\n\n  return dates;\n};\n\n/**\n * Reset expression iterator state\n *\n * @public\n */\nCronExpression.prototype.reset = function reset (newDate) {\n  this._currentDate = new CronDate(newDate || this._options.currentDate);\n};\n\n/**\n * Parse input expression (async)\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @param {Function} [callback]\n */\nCronExpression.parse = function parse(expression, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  function parse (expression, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.currentDate === 'undefined') {\n      options.currentDate = new CronDate(undefined, self._tz);\n    }\n\n    // Is input expression predefined?\n    if (CronExpression.predefined[expression]) {\n      expression = CronExpression.predefined[expression];\n    }\n\n    // Split fields\n    var fields = [];\n    var atoms = (expression + '').trim().split(/\\s+/);\n\n    if (atoms.length > 6) {\n      throw new Error('Invalid cron expression');\n    }\n\n    // Resolve fields\n    var start = (CronExpression.map.length - atoms.length);\n    for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n      var field = CronExpression.map[i]; // Field name\n      var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n      if (i < start || !value) { // Use default value\n        fields.push(CronExpression._parseField(\n          field,\n          CronExpression.parseDefaults[i],\n          CronExpression.constraints[i])\n        );\n      } else {\n        var val = field === 'dayOfWeek' ? parseNthDay(value) : value;\n\n        fields.push(CronExpression._parseField(\n          field,\n          val,\n          CronExpression.constraints[i])\n        );\n      }\n    }\n\n    var mappedFields = {};\n    for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n      var key = CronExpression.map[i];\n      mappedFields[key] = fields[i];\n    }\n\n    // Filter out any day of month value that is larger than given month expects\n    if (mappedFields.month.length === 1) {\n      var daysInMonth = CronExpression.daysInMonth[mappedFields.month[0] - 1];\n\n      if (mappedFields.dayOfMonth[0] > daysInMonth) {\n        throw new Error('Invalid explicit day of month definition');\n      }\n\n      mappedFields.dayOfMonth = mappedFields.dayOfMonth.filter(function(dayOfMonth) {\n        return dayOfMonth <= daysInMonth;\n      });\n    }\n\n    return new CronExpression(mappedFields, options);\n\n    /**\n     * Parses out the # special character for the dayOfWeek field & adds it to options.\n     *\n     * @param {String} val\n     * @return {String}\n     * @private\n     */\n    function parseNthDay(val) {\n      var atoms = val.split('#');\n      if (atoms.length > 1) {\n        var nthValue = +atoms[atoms.length - 1];\n        if(/,/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `,` '\n            + 'special characters are incompatible');\n        }\n        if(/\\//.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `/` '\n            + 'special characters are incompatible');\n        }\n        if(/-/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `-` '\n            + 'special characters are incompatible');\n        }\n        if (atoms.length > 2 || safeIsNaN(nthValue) || (nthValue < 1 || nthValue > 5)) {\n          throw new Error('Constraint error, invalid dayOfWeek occurrence number (#)');\n        }\n\n        options.nthDayOfWeek = nthValue;\n        return atoms[0];\n      }\n      return val;\n    }\n  }\n\n  return parse(expression, options);\n};\n\nmodule.exports = CronExpression;\n"]},"metadata":{},"sourceType":"script"}