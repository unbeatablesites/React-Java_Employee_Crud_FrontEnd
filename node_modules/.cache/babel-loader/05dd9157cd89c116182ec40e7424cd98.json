{"ast":null,"code":"'use strict';\n/*\n  node-schedule\n  A cron-like and not-cron-like job scheduler for Node.\n*/\n\nvar events = require('events'),\n    util = require('util'),\n    cronParser = require('cron-parser'),\n    CronDate = require('cron-parser/lib/date'),\n    lt = require('long-timeout'),\n    sorted = require('sorted-array-functions');\n/* Job object */\n\n\nvar anonJobCounter = 0;\nvar scheduledJobs = {};\n\nfunction isValidDate(date) {\n  // Taken from http://stackoverflow.com/a/12372720/1562178\n  // If getTime() returns NaN it'll return false anyway\n  return date.getTime() === date.getTime();\n}\n\nfunction Job(name, job, callback) {\n  // setup a private pendingInvocations variable\n  var pendingInvocations = []; //setup a private number of invocations variable\n\n  var triggeredJobs = 0; // Set scope vars\n\n  var jobName = name && typeof name === 'string' ? name : '<Anonymous Job ' + ++anonJobCounter + '>';\n  this.job = name && typeof name === 'function' ? name : job; // Make sure callback is actually a callback\n\n  if (this.job === name) {\n    // Name wasn't provided and maybe a callback is there\n    this.callback = typeof job === 'function' ? job : false;\n  } else {\n    // Name was provided, and maybe a callback is there\n    this.callback = typeof callback === 'function' ? callback : false;\n  } // Check for generator\n\n\n  if (typeof this.job === 'function' && this.job.prototype && this.job.prototype.next) {\n    this.job = function () {\n      return this.next().value;\n    }.bind(this.job.call(this));\n  } // define properties\n\n\n  Object.defineProperty(this, 'name', {\n    value: jobName,\n    writable: false,\n    enumerable: true\n  }); // method that require private access\n\n  this.trackInvocation = function (invocation) {\n    // add to our invocation list\n    sorted.add(pendingInvocations, invocation, sorter);\n    return true;\n  };\n\n  this.stopTrackingInvocation = function (invocation) {\n    var invIdx = pendingInvocations.indexOf(invocation);\n\n    if (invIdx > -1) {\n      pendingInvocations.splice(invIdx, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n  this.triggeredJobs = function () {\n    return triggeredJobs;\n  };\n\n  this.setTriggeredJobs = function (triggeredJob) {\n    triggeredJobs = triggeredJob;\n  };\n\n  this.cancel = function (reschedule) {\n    reschedule = typeof reschedule == 'boolean' ? reschedule : false;\n    var inv, newInv;\n    var newInvs = [];\n\n    for (var j = 0; j < pendingInvocations.length; j++) {\n      inv = pendingInvocations[j];\n      cancelInvocation(inv);\n\n      if (reschedule && (inv.recurrenceRule.recurs || inv.recurrenceRule.next)) {\n        newInv = scheduleNextRecurrence(inv.recurrenceRule, this, inv.fireDate, inv.endDate);\n\n        if (newInv !== null) {\n          newInvs.push(newInv);\n        }\n      }\n    }\n\n    pendingInvocations = [];\n\n    for (var k = 0; k < newInvs.length; k++) {\n      this.trackInvocation(newInvs[k]);\n    } // remove from scheduledJobs if reschedule === false\n\n\n    if (!reschedule) {\n      if (this.name) {\n        delete scheduledJobs[this.name];\n      }\n    }\n\n    return true;\n  };\n\n  this.cancelNext = function (reschedule) {\n    reschedule = typeof reschedule == 'boolean' ? reschedule : true;\n\n    if (!pendingInvocations.length) {\n      return false;\n    }\n\n    var newInv;\n    var nextInv = pendingInvocations.shift();\n    cancelInvocation(nextInv);\n\n    if (reschedule && (nextInv.recurrenceRule.recurs || nextInv.recurrenceRule.next)) {\n      newInv = scheduleNextRecurrence(nextInv.recurrenceRule, this, nextInv.fireDate, nextInv.endDate);\n\n      if (newInv !== null) {\n        this.trackInvocation(newInv);\n      }\n    }\n\n    return true;\n  };\n\n  this.reschedule = function (spec) {\n    var inv;\n    var cInvs = pendingInvocations.slice();\n\n    for (var j = 0; j < cInvs.length; j++) {\n      inv = cInvs[j];\n      cancelInvocation(inv);\n    }\n\n    pendingInvocations = [];\n\n    if (this.schedule(spec)) {\n      this.setTriggeredJobs(0);\n      return true;\n    } else {\n      pendingInvocations = cInvs;\n      return false;\n    }\n  };\n\n  this.nextInvocation = function () {\n    if (!pendingInvocations.length) {\n      return null;\n    }\n\n    return pendingInvocations[0].fireDate;\n  };\n\n  this.pendingInvocations = function () {\n    return pendingInvocations;\n  };\n}\n\nutil.inherits(Job, events.EventEmitter);\n\nJob.prototype.invoke = function (fireDate) {\n  if (typeof this.job == 'function') {\n    this.setTriggeredJobs(this.triggeredJobs() + 1);\n    this.job(fireDate);\n  } else {\n    this.job.execute(fireDate);\n  }\n};\n\nJob.prototype.runOnDate = function (date) {\n  return this.schedule(date);\n};\n\nJob.prototype.schedule = function (spec) {\n  var self = this;\n  var success = false;\n  var inv;\n  var start;\n  var end;\n  var tz; // save passed-in value before 'spec' is replaced\n\n  if (typeof spec === 'object' && 'tz' in spec) {\n    tz = spec.tz;\n  }\n\n  if (typeof spec === 'object' && spec.rule) {\n    start = spec.start || undefined;\n    end = spec.end || undefined;\n    spec = spec.rule;\n\n    if (start) {\n      if (!(start instanceof Date)) {\n        start = new Date(start);\n      }\n\n      start = new CronDate(start, tz);\n\n      if (!isValidDate(start) || start.getTime() < Date.now()) {\n        start = undefined;\n      }\n    }\n\n    if (end && !(end instanceof Date) && !isValidDate(end = new Date(end))) {\n      end = undefined;\n    }\n\n    if (end) {\n      end = new CronDate(end, tz);\n    }\n  }\n\n  try {\n    var res = cronParser.parseExpression(spec, {\n      currentDate: start,\n      tz: tz\n    });\n    inv = scheduleNextRecurrence(res, self, start, end);\n\n    if (inv !== null) {\n      success = self.trackInvocation(inv);\n    }\n  } catch (err) {\n    var type = typeof spec;\n\n    if (type === 'string' || type === 'number') {\n      spec = new Date(spec);\n    }\n\n    if (spec instanceof Date && isValidDate(spec)) {\n      spec = new CronDate(spec);\n\n      if (spec.getTime() >= Date.now()) {\n        inv = new Invocation(self, spec);\n        scheduleInvocation(inv);\n        success = self.trackInvocation(inv);\n      }\n    } else if (type === 'object') {\n      if (!(spec instanceof RecurrenceRule)) {\n        var r = new RecurrenceRule();\n\n        if ('year' in spec) {\n          r.year = spec.year;\n        }\n\n        if ('month' in spec) {\n          r.month = spec.month;\n        }\n\n        if ('date' in spec) {\n          r.date = spec.date;\n        }\n\n        if ('dayOfWeek' in spec) {\n          r.dayOfWeek = spec.dayOfWeek;\n        }\n\n        if ('hour' in spec) {\n          r.hour = spec.hour;\n        }\n\n        if ('minute' in spec) {\n          r.minute = spec.minute;\n        }\n\n        if ('second' in spec) {\n          r.second = spec.second;\n        }\n\n        spec = r;\n      }\n\n      spec.tz = tz;\n      inv = scheduleNextRecurrence(spec, self, start, end);\n\n      if (inv !== null) {\n        success = self.trackInvocation(inv);\n      }\n    }\n  }\n\n  scheduledJobs[this.name] = this;\n  return success;\n};\n/* API\n  invoke()\n  runOnDate(date)\n  schedule(date || recurrenceRule || cronstring)\n  cancel(reschedule = false)\n  cancelNext(reschedule = true)\n\n   Property constraints\n  name: readonly\n  job: readwrite\n*/\n\n/* DoesntRecur rule */\n\n\nvar DoesntRecur = new RecurrenceRule();\nDoesntRecur.recurs = false;\n/* Invocation object */\n\nfunction Invocation(job, fireDate, recurrenceRule, endDate) {\n  this.job = job;\n  this.fireDate = fireDate;\n  this.endDate = endDate;\n  this.recurrenceRule = recurrenceRule || DoesntRecur;\n  this.timerID = null;\n}\n\nfunction sorter(a, b) {\n  return a.fireDate.getTime() - b.fireDate.getTime();\n}\n/* Range object */\n\n\nfunction Range(start, end, step) {\n  this.start = start || 0;\n  this.end = end || 60;\n  this.step = step || 1;\n}\n\nRange.prototype.contains = function (val) {\n  if (this.step === null || this.step === 1) {\n    return val >= this.start && val <= this.end;\n  } else {\n    for (var i = this.start; i < this.end; i += this.step) {\n      if (i === val) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\n/* RecurrenceRule object */\n\n/*\n  Interpreting each property:\n  null - any value is valid\n  number - fixed value\n  Range - value must fall in range\n  array - value must validate against any item in list\n\n  NOTE: Cron months are 1-based, but RecurrenceRule months are 0-based.\n*/\n\n\nfunction RecurrenceRule(year, month, date, dayOfWeek, hour, minute, second) {\n  this.recurs = true;\n  this.year = year == null ? null : year;\n  this.month = month == null ? null : month;\n  this.date = date == null ? null : date;\n  this.dayOfWeek = dayOfWeek == null ? null : dayOfWeek;\n  this.hour = hour == null ? null : hour;\n  this.minute = minute == null ? null : minute;\n  this.second = second == null ? 0 : second;\n}\n\nRecurrenceRule.prototype.isValid = function () {\n  function isValidType(num) {\n    if (Array.isArray(num) || num instanceof Array) {\n      return num.every(function (e) {\n        return isValidType(e);\n      });\n    }\n\n    return !(Number.isNaN(Number(num)) && !(num instanceof Range));\n  }\n\n  if (this.month !== null && (this.month < 0 || this.month > 11 || !isValidType(this.month))) {\n    return false;\n  }\n\n  if (this.dayOfWeek !== null && (this.dayOfWeek < 0 || this.dayOfWeek > 6 || !isValidType(this.dayOfWeek))) {\n    return false;\n  }\n\n  if (this.hour !== null && (this.hour < 0 || this.hour > 23 || !isValidType(this.hour))) {\n    return false;\n  }\n\n  if (this.minute !== null && (this.minute < 0 || this.minute > 59 || !isValidType(this.minute))) {\n    return false;\n  }\n\n  if (this.second !== null && (this.second < 0 || this.second > 59 || !isValidType(this.second))) {\n    return false;\n  }\n\n  if (this.date !== null) {\n    if (!isValidType(this.date)) {\n      return false;\n    }\n\n    switch (this.month) {\n      case 3:\n      case 5:\n      case 8:\n      case 10:\n        if (this.date < 1 || this.date > 30) {\n          return false;\n        }\n\n        break;\n\n      case 1:\n        if (this.date < 1 || this.date > 29) {\n          return false;\n        }\n\n        break;\n\n      default:\n        if (this.date < 1 || this.date > 31) {\n          return false;\n        }\n\n    }\n  }\n\n  return true;\n};\n\nRecurrenceRule.prototype.nextInvocationDate = function (base) {\n  var next = this._nextInvocationDate(base);\n\n  return next ? next.toDate() : null;\n};\n\nRecurrenceRule.prototype._nextInvocationDate = function (base) {\n  base = base instanceof CronDate || base instanceof Date ? base : new Date();\n\n  if (!this.recurs) {\n    return null;\n  }\n\n  if (!this.isValid()) {\n    return null;\n  }\n\n  var now = new CronDate(Date.now(), this.tz);\n  var fullYear = now.getFullYear();\n\n  if (this.year !== null && typeof this.year == 'number' && this.year < fullYear) {\n    return null;\n  }\n\n  var next = new CronDate(base.getTime(), this.tz);\n  next.addSecond();\n\n  while (true) {\n    if (this.year !== null) {\n      fullYear = next.getFullYear();\n\n      if (typeof this.year == 'number' && this.year < fullYear) {\n        next = null;\n        break;\n      }\n\n      if (!recurMatch(fullYear, this.year)) {\n        next.addYear();\n        next.setMonth(0);\n        next.setDate(1);\n        next.setHours(0);\n        next.setMinutes(0);\n        next.setSeconds(0);\n        continue;\n      }\n    }\n\n    if (this.month != null && !recurMatch(next.getMonth(), this.month)) {\n      next.addMonth();\n      continue;\n    }\n\n    if (this.date != null && !recurMatch(next.getDate(), this.date)) {\n      next.addDay();\n      continue;\n    }\n\n    if (this.dayOfWeek != null && !recurMatch(next.getDay(), this.dayOfWeek)) {\n      next.addDay();\n      continue;\n    }\n\n    if (this.hour != null && !recurMatch(next.getHours(), this.hour)) {\n      next.addHour();\n      continue;\n    }\n\n    if (this.minute != null && !recurMatch(next.getMinutes(), this.minute)) {\n      next.addMinute();\n      continue;\n    }\n\n    if (this.second != null && !recurMatch(next.getSeconds(), this.second)) {\n      next.addSecond();\n      continue;\n    }\n\n    break;\n  }\n\n  return next;\n};\n\nfunction recurMatch(val, matcher) {\n  if (matcher == null) {\n    return true;\n  }\n\n  if (typeof matcher === 'number') {\n    return val === matcher;\n  } else if (typeof matcher === 'string') {\n    return val === Number(matcher);\n  } else if (matcher instanceof Range) {\n    return matcher.contains(val);\n  } else if (Array.isArray(matcher) || matcher instanceof Array) {\n    for (var i = 0; i < matcher.length; i++) {\n      if (recurMatch(val, matcher[i])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/* Date-based scheduler */\n\n\nfunction runOnDate(date, job) {\n  var now = Date.now();\n  var then = date.getTime();\n  return lt.setTimeout(function () {\n    if (then > Date.now()) runOnDate(date, job);else job();\n  }, then < now ? 0 : then - now);\n}\n\nvar invocations = [];\nvar currentInvocation = null;\n\nfunction scheduleInvocation(invocation) {\n  sorted.add(invocations, invocation, sorter);\n  prepareNextInvocation();\n  var date = invocation.fireDate instanceof CronDate ? invocation.fireDate.toDate() : invocation.fireDate;\n  invocation.job.emit('scheduled', date);\n}\n\nfunction prepareNextInvocation() {\n  if (invocations.length > 0 && currentInvocation !== invocations[0]) {\n    if (currentInvocation !== null) {\n      lt.clearTimeout(currentInvocation.timerID);\n      currentInvocation.timerID = null;\n      currentInvocation = null;\n    }\n\n    currentInvocation = invocations[0];\n    var job = currentInvocation.job;\n    var cinv = currentInvocation;\n    currentInvocation.timerID = runOnDate(currentInvocation.fireDate, function () {\n      currentInvocationFinished();\n\n      if (job.callback) {\n        job.callback();\n      }\n\n      if (cinv.recurrenceRule.recurs || cinv.recurrenceRule._endDate === null) {\n        var inv = scheduleNextRecurrence(cinv.recurrenceRule, cinv.job, cinv.fireDate, cinv.endDate);\n\n        if (inv !== null) {\n          inv.job.trackInvocation(inv);\n        }\n      }\n\n      job.stopTrackingInvocation(cinv);\n      job.invoke(cinv.fireDate instanceof CronDate ? cinv.fireDate.toDate() : cinv.fireDate);\n      job.emit('run');\n    });\n  }\n}\n\nfunction currentInvocationFinished() {\n  invocations.shift();\n  currentInvocation = null;\n  prepareNextInvocation();\n}\n\nfunction cancelInvocation(invocation) {\n  var idx = invocations.indexOf(invocation);\n\n  if (idx > -1) {\n    invocations.splice(idx, 1);\n\n    if (invocation.timerID !== null) {\n      lt.clearTimeout(invocation.timerID);\n    }\n\n    if (currentInvocation === invocation) {\n      currentInvocation = null;\n    }\n\n    invocation.job.emit('canceled', invocation.fireDate);\n    prepareNextInvocation();\n  }\n}\n/* Recurrence scheduler */\n\n\nfunction scheduleNextRecurrence(rule, job, prevDate, endDate) {\n  prevDate = prevDate instanceof CronDate ? prevDate : new CronDate();\n  var date = rule instanceof RecurrenceRule ? rule._nextInvocationDate(prevDate) : rule.next();\n\n  if (date === null) {\n    return null;\n  }\n\n  if (endDate instanceof CronDate && date.getTime() > endDate.getTime()) {\n    return null;\n  }\n\n  var inv = new Invocation(job, date, rule, endDate);\n  scheduleInvocation(inv);\n  return inv;\n}\n/* Convenience methods */\n\n\nfunction scheduleJob() {\n  if (arguments.length < 2) {\n    return null;\n  }\n\n  var name = arguments.length >= 3 && typeof arguments[0] === 'string' ? arguments[0] : null;\n  var spec = name ? arguments[1] : arguments[0];\n  var method = name ? arguments[2] : arguments[1];\n  var callback = name ? arguments[3] : arguments[2];\n  var job = new Job(name, method, callback);\n\n  if (job.schedule(spec)) {\n    return job;\n  }\n\n  return null;\n}\n\nfunction rescheduleJob(job, spec) {\n  if (job instanceof Job) {\n    if (job.reschedule(spec)) {\n      return job;\n    }\n  } else if (typeof job == 'string' || job instanceof String) {\n    if (job in scheduledJobs && scheduledJobs.hasOwnProperty(job)) {\n      if (scheduledJobs[job].reschedule(spec)) {\n        return scheduledJobs[job];\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction cancelJob(job) {\n  var success = false;\n\n  if (job instanceof Job) {\n    success = job.cancel();\n  } else if (typeof job == 'string' || job instanceof String) {\n    if (job in scheduledJobs && scheduledJobs.hasOwnProperty(job)) {\n      success = scheduledJobs[job].cancel();\n    }\n  }\n\n  return success;\n}\n/* Public API */\n\n\nmodule.exports.Job = Job;\nmodule.exports.Range = Range;\nmodule.exports.RecurrenceRule = RecurrenceRule;\nmodule.exports.Invocation = Invocation;\nmodule.exports.scheduleJob = scheduleJob;\nmodule.exports.rescheduleJob = rescheduleJob;\nmodule.exports.scheduledJobs = scheduledJobs;\nmodule.exports.cancelJob = cancelJob;","map":{"version":3,"sources":["/Users/frankuzoka/Desktop/React-Java_Employee_Crud_FrontEnd/node_modules/node-schedule/lib/schedule.js"],"names":["events","require","util","cronParser","CronDate","lt","sorted","anonJobCounter","scheduledJobs","isValidDate","date","getTime","Job","name","job","callback","pendingInvocations","triggeredJobs","jobName","prototype","next","value","bind","call","Object","defineProperty","writable","enumerable","trackInvocation","invocation","add","sorter","stopTrackingInvocation","invIdx","indexOf","splice","setTriggeredJobs","triggeredJob","cancel","reschedule","inv","newInv","newInvs","j","length","cancelInvocation","recurrenceRule","recurs","scheduleNextRecurrence","fireDate","endDate","push","k","cancelNext","nextInv","shift","spec","cInvs","slice","schedule","nextInvocation","inherits","EventEmitter","invoke","execute","runOnDate","self","success","start","end","tz","rule","undefined","Date","now","res","parseExpression","currentDate","err","type","Invocation","scheduleInvocation","RecurrenceRule","r","year","month","dayOfWeek","hour","minute","second","DoesntRecur","timerID","a","b","Range","step","contains","val","i","isValid","isValidType","num","Array","isArray","every","e","Number","isNaN","nextInvocationDate","base","_nextInvocationDate","toDate","fullYear","getFullYear","addSecond","recurMatch","addYear","setMonth","setDate","setHours","setMinutes","setSeconds","getMonth","addMonth","getDate","addDay","getDay","getHours","addHour","getMinutes","addMinute","getSeconds","matcher","then","setTimeout","invocations","currentInvocation","prepareNextInvocation","emit","clearTimeout","cinv","currentInvocationFinished","_endDate","idx","prevDate","scheduleJob","arguments","method","rescheduleJob","String","hasOwnProperty","cancelJob","module","exports"],"mappings":"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","sourcesContent":["\n'use strict';\n\n/*\n  node-schedule\n  A cron-like and not-cron-like job scheduler for Node.\n*/\n\nvar events = require('events'),\n  util = require('util'),\n  cronParser = require('cron-parser'),\n  CronDate = require('cron-parser/lib/date'),\n  lt = require('long-timeout'),\n  sorted = require('sorted-array-functions');\n\n/* Job object */\nvar anonJobCounter = 0;\nvar scheduledJobs = {};\n\nfunction isValidDate(date) {\n  // Taken from http://stackoverflow.com/a/12372720/1562178\n  // If getTime() returns NaN it'll return false anyway\n  return date.getTime() === date.getTime();\n}\n\nfunction Job(name, job, callback) {\n  // setup a private pendingInvocations variable\n  var pendingInvocations = [];\n\n  //setup a private number of invocations variable\n  var triggeredJobs = 0;\n\n  // Set scope vars\n  var jobName = name && typeof name === 'string' ? name : '<Anonymous Job ' + (++anonJobCounter) + '>';\n  this.job = name && typeof name === 'function' ? name : job;\n\n  // Make sure callback is actually a callback\n  if (this.job === name) {\n    // Name wasn't provided and maybe a callback is there\n    this.callback = typeof job === 'function' ? job : false;\n  } else {\n    // Name was provided, and maybe a callback is there\n    this.callback = typeof callback === 'function' ? callback : false;\n  }\n\n  // Check for generator\n  if (typeof this.job === 'function' &&\n      this.job.prototype &&\n      this.job.prototype.next) {\n    this.job = function() {\n      return this.next().value;\n    }.bind(this.job.call(this));\n  }\n\n  // define properties\n  Object.defineProperty(this, 'name', {\n    value: jobName,\n    writable: false,\n    enumerable: true\n  });\n\n  // method that require private access\n  this.trackInvocation = function(invocation) {\n    // add to our invocation list\n    sorted.add(pendingInvocations, invocation, sorter);\n    return true;\n  };\n  this.stopTrackingInvocation = function(invocation) {\n    var invIdx = pendingInvocations.indexOf(invocation);\n    if (invIdx > -1) {\n      pendingInvocations.splice(invIdx, 1);\n      return true;\n    }\n\n    return false;\n  };\n  this.triggeredJobs = function() {\n    return triggeredJobs;\n  };\n  this.setTriggeredJobs = function(triggeredJob) {\n    triggeredJobs = triggeredJob;\n  };\n  this.cancel = function(reschedule) {\n    reschedule = (typeof reschedule == 'boolean') ? reschedule : false;\n\n    var inv, newInv;\n    var newInvs = [];\n    for (var j = 0; j < pendingInvocations.length; j++) {\n      inv = pendingInvocations[j];\n\n      cancelInvocation(inv);\n\n      if (reschedule && (inv.recurrenceRule.recurs || inv.recurrenceRule.next)) {\n        newInv = scheduleNextRecurrence(inv.recurrenceRule, this, inv.fireDate, inv.endDate);\n        if (newInv !== null) {\n          newInvs.push(newInv);\n        }\n      }\n    }\n\n    pendingInvocations = [];\n\n    for (var k = 0; k < newInvs.length; k++) {\n      this.trackInvocation(newInvs[k]);\n    }\n\n    // remove from scheduledJobs if reschedule === false\n    if (!reschedule) {\n      if (this.name) {\n        delete scheduledJobs[this.name];\n      }\n    }\n\n    return true;\n  };\n  this.cancelNext = function(reschedule) {\n    reschedule = (typeof reschedule == 'boolean') ? reschedule : true;\n\n    if (!pendingInvocations.length) {\n      return false;\n    }\n\n    var newInv;\n    var nextInv = pendingInvocations.shift();\n\n    cancelInvocation(nextInv);\n\n      if (reschedule && (nextInv.recurrenceRule.recurs || nextInv.recurrenceRule.next)) {\n      newInv = scheduleNextRecurrence(nextInv.recurrenceRule, this, nextInv.fireDate, nextInv.endDate);\n      if (newInv !== null) {\n        this.trackInvocation(newInv);\n      }\n    }\n\n    return true;\n  };\n  this.reschedule = function(spec) {\n    var inv;\n    var cInvs = pendingInvocations.slice();\n\n    for (var j = 0; j < cInvs.length; j++) {\n      inv = cInvs[j];\n\n      cancelInvocation(inv);\n    }\n\n    pendingInvocations = [];\n\n    if (this.schedule(spec)) {\n      this.setTriggeredJobs(0);\n      return true;\n    } else {\n      pendingInvocations = cInvs;\n      return false;\n    }\n  };\n  this.nextInvocation = function() {\n    if (!pendingInvocations.length) {\n      return null;\n    }\n    return pendingInvocations[0].fireDate;\n  };\n  this.pendingInvocations = function() {\n    return pendingInvocations;\n  };\n}\n\nutil.inherits(Job, events.EventEmitter);\n\nJob.prototype.invoke = function(fireDate) {\n  if (typeof this.job == 'function') {\n    this.setTriggeredJobs(this.triggeredJobs() + 1);\n    this.job(fireDate);\n  } else {\n    this.job.execute(fireDate);\n  }\n};\n\nJob.prototype.runOnDate = function(date) {\n  return this.schedule(date);\n};\n\nJob.prototype.schedule = function(spec) {\n  var self = this;\n  var success = false;\n  var inv;\n  var start;\n  var end;\n  var tz;\n\n  // save passed-in value before 'spec' is replaced\n  if (typeof spec === 'object' && 'tz' in spec) {\n    tz = spec.tz;\n  }\n\n  if (typeof spec === 'object' && spec.rule) {\n    start = spec.start || undefined;\n    end = spec.end || undefined;\n    spec = spec.rule;\n\n    if (start) {\n      if (!(start instanceof Date)) {\n        start = new Date(start);\n      }\n\n      start = new CronDate(start, tz);\n      if (!isValidDate(start) || start.getTime() < Date.now()) {\n        start = undefined;\n      }\n    }\n\n    if (end && !(end instanceof Date) && !isValidDate(end = new Date(end))) {\n      end = undefined;\n    }\n\n    if (end) {\n      end = new CronDate(end, tz);\n    }\n  }\n\n  try {\n    var res = cronParser.parseExpression(spec, { currentDate: start, tz: tz });\n    inv = scheduleNextRecurrence(res, self, start, end);\n    if (inv !== null) {\n      success = self.trackInvocation(inv);\n    }\n  } catch (err) {\n    var type = typeof spec;\n    if ((type === 'string') || (type === 'number')) {\n      spec = new Date(spec);\n    }\n\n    if ((spec instanceof Date) && (isValidDate(spec))) {\n      spec = new CronDate(spec);\n      if (spec.getTime() >= Date.now()) {\n        inv = new Invocation(self, spec);\n        scheduleInvocation(inv);\n        success = self.trackInvocation(inv);\n      }\n    } else if (type === 'object') {\n      if (!(spec instanceof RecurrenceRule)) {\n        var r = new RecurrenceRule();\n        if ('year' in spec) {\n          r.year = spec.year;\n        }\n        if ('month' in spec) {\n          r.month = spec.month;\n        }\n        if ('date' in spec) {\n          r.date = spec.date;\n        }\n        if ('dayOfWeek' in spec) {\n          r.dayOfWeek = spec.dayOfWeek;\n        }\n        if ('hour' in spec) {\n          r.hour = spec.hour;\n        }\n        if ('minute' in spec) {\n          r.minute = spec.minute;\n        }\n        if ('second' in spec) {\n          r.second = spec.second;\n        }\n\n        spec = r;\n      }\n\n      spec.tz = tz;\n      inv = scheduleNextRecurrence(spec, self, start, end);\n      if (inv !== null) {\n        success = self.trackInvocation(inv);\n      }\n    }\n  }\n\n  scheduledJobs[this.name] = this;\n  return success;\n};\n\n/* API\n  invoke()\n  runOnDate(date)\n  schedule(date || recurrenceRule || cronstring)\n  cancel(reschedule = false)\n  cancelNext(reschedule = true)\n\n   Property constraints\n  name: readonly\n  job: readwrite\n*/\n\n/* DoesntRecur rule */\nvar DoesntRecur = new RecurrenceRule();\nDoesntRecur.recurs = false;\n\n/* Invocation object */\nfunction Invocation(job, fireDate, recurrenceRule, endDate) {\n  this.job = job;\n  this.fireDate = fireDate;\n  this.endDate = endDate;\n  this.recurrenceRule = recurrenceRule || DoesntRecur;\n\n  this.timerID = null;\n}\n\nfunction sorter(a, b) {\n  return (a.fireDate.getTime() - b.fireDate.getTime());\n}\n\n/* Range object */\nfunction Range(start, end, step) {\n  this.start = start || 0;\n  this.end = end || 60;\n  this.step = step || 1;\n}\n\nRange.prototype.contains = function(val) {\n  if (this.step === null || this.step === 1) {\n    return (val >= this.start && val <= this.end);\n  } else {\n    for (var i = this.start; i < this.end; i += this.step) {\n      if (i === val) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\n\n/* RecurrenceRule object */\n/*\n  Interpreting each property:\n  null - any value is valid\n  number - fixed value\n  Range - value must fall in range\n  array - value must validate against any item in list\n\n  NOTE: Cron months are 1-based, but RecurrenceRule months are 0-based.\n*/\nfunction RecurrenceRule(year, month, date, dayOfWeek, hour, minute, second) {\n  this.recurs = true;\n\n  this.year = (year == null) ? null : year;\n  this.month = (month == null) ? null : month;\n  this.date = (date == null) ? null : date;\n  this.dayOfWeek = (dayOfWeek == null) ? null : dayOfWeek;\n  this.hour = (hour == null) ? null : hour;\n  this.minute = (minute == null) ? null : minute;\n  this.second = (second == null) ? 0 : second;\n}\n\nRecurrenceRule.prototype.isValid = function() {\n  function isValidType(num) {\n    if (Array.isArray(num) || (num instanceof Array)) {\n      return num.every(function(e) {\n        return isValidType(e);\n      });\n    }\n    return !(Number.isNaN(Number(num)) && !(num instanceof Range));\n  }\n  if (this.month !== null && (this.month < 0 || this.month > 11 || !isValidType(this.month))) {\n    return false;\n  }\n  if (this.dayOfWeek !== null && (this.dayOfWeek < 0 || this.dayOfWeek > 6 || !isValidType(this.dayOfWeek))) {\n    return false;\n  }\n  if (this.hour !== null && (this.hour < 0 || this.hour > 23 || !isValidType(this.hour))) {\n    return false;\n  }\n  if (this.minute !== null && (this.minute < 0 || this.minute > 59 || !isValidType(this.minute))) {\n    return false;\n  }\n  if (this.second !== null && (this.second < 0 || this.second > 59 || !isValidType(this.second))) {\n    return false;\n  }\n  if (this.date !== null) {\n    if(!isValidType(this.date)) {\n      return false;\n    }\n    switch (this.month) {\n      case 3:\n      case 5:\n      case 8:\n      case 10:\n        if (this.date < 1 || this. date > 30) {\n          return false;\n        }\n        break;\n      case 1:\n        if (this.date < 1 || this. date > 29) {\n          return false;\n        }\n        break;\n      default:\n        if (this.date < 1 || this. date > 31) {\n          return false;\n        }\n    }\n  }\n  return true;\n};\n\nRecurrenceRule.prototype.nextInvocationDate = function(base) {\n  var next = this._nextInvocationDate(base);\n  return next ? next.toDate() : null;\n};\n\nRecurrenceRule.prototype._nextInvocationDate = function(base) {\n  base = ((base instanceof CronDate) || (base instanceof Date)) ? base : (new Date());\n  if (!this.recurs) {\n    return null;\n  }\n\n  if(!this.isValid()) {\n    return null;\n  }\n\n  var now = new CronDate(Date.now(), this.tz);\n  var fullYear = now.getFullYear();\n  if ((this.year !== null) &&\n      (typeof this.year == 'number') &&\n      (this.year < fullYear)) {\n    return null;\n  }\n\n  var next = new CronDate(base.getTime(), this.tz);\n  next.addSecond();\n\n  while (true) {\n    if (this.year !== null) {\n      fullYear = next.getFullYear();\n      if ((typeof this.year == 'number') && (this.year < fullYear)) {\n        next = null;\n        break;\n      }\n\n      if (!recurMatch(fullYear, this.year)) {\n        next.addYear();\n        next.setMonth(0);\n        next.setDate(1);\n        next.setHours(0);\n        next.setMinutes(0);\n        next.setSeconds(0);\n        continue;\n      }\n    }\n    if (this.month != null && !recurMatch(next.getMonth(), this.month)) {\n      next.addMonth();\n      continue;\n    }\n    if (this.date != null && !recurMatch(next.getDate(), this.date)) {\n      next.addDay();\n      continue;\n    }\n    if (this.dayOfWeek != null && !recurMatch(next.getDay(), this.dayOfWeek)) {\n      next.addDay();\n      continue;\n    }\n    if (this.hour != null && !recurMatch(next.getHours(), this.hour)) {\n      next.addHour();\n      continue;\n    }\n    if (this.minute != null && !recurMatch(next.getMinutes(), this.minute)) {\n      next.addMinute();\n      continue;\n    }\n    if (this.second != null && !recurMatch(next.getSeconds(), this.second)) {\n      next.addSecond();\n      continue;\n    }\n\n    break;\n  }\n\n  return next;\n};\n\nfunction recurMatch(val, matcher) {\n  if (matcher == null) {\n    return true;\n  }\n\n  if (typeof matcher === 'number') {\n    return (val === matcher);\n  } else if(typeof matcher === 'string') {\n    return (val === Number(matcher));\n  } else if (matcher instanceof Range) {\n    return matcher.contains(val);\n  } else if (Array.isArray(matcher) || (matcher instanceof Array)) {\n    for (var i = 0; i < matcher.length; i++) {\n      if (recurMatch(val, matcher[i])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/* Date-based scheduler */\nfunction runOnDate(date, job) {\n  var now = Date.now();\n  var then = date.getTime();\n\n  return lt.setTimeout(function() {\n    if (then > Date.now())\n      runOnDate(date, job);\n    else\n      job();\n  }, (then < now ? 0 : then - now));\n}\n\nvar invocations = [];\nvar currentInvocation = null;\n\nfunction scheduleInvocation(invocation) {\n  sorted.add(invocations, invocation, sorter);\n  prepareNextInvocation();\n  var date = invocation.fireDate instanceof CronDate ? invocation.fireDate.toDate() : invocation.fireDate;\n  invocation.job.emit('scheduled', date);\n}\n\nfunction prepareNextInvocation() {\n  if (invocations.length > 0 && currentInvocation !== invocations[0]) {\n    if (currentInvocation !== null) {\n      lt.clearTimeout(currentInvocation.timerID);\n      currentInvocation.timerID = null;\n      currentInvocation = null;\n    }\n\n    currentInvocation = invocations[0];\n\n    var job = currentInvocation.job;\n    var cinv = currentInvocation;\n    currentInvocation.timerID = runOnDate(currentInvocation.fireDate, function() {\n      currentInvocationFinished();\n\n      if (job.callback) {\n        job.callback();\n      }\n\n      if (cinv.recurrenceRule.recurs || cinv.recurrenceRule._endDate === null) {\n        var inv = scheduleNextRecurrence(cinv.recurrenceRule, cinv.job, cinv.fireDate, cinv.endDate);\n        if (inv !== null) {\n          inv.job.trackInvocation(inv);\n        }\n      }\n\n      job.stopTrackingInvocation(cinv);\n\n      job.invoke(cinv.fireDate instanceof CronDate ? cinv.fireDate.toDate() : cinv.fireDate);\n      job.emit('run');\n    });\n  }\n}\n\nfunction currentInvocationFinished() {\n  invocations.shift();\n  currentInvocation = null;\n  prepareNextInvocation();\n}\n\nfunction cancelInvocation(invocation) {\n  var idx = invocations.indexOf(invocation);\n  if (idx > -1) {\n    invocations.splice(idx, 1);\n    if (invocation.timerID !== null) {\n      lt.clearTimeout(invocation.timerID);\n    }\n\n    if (currentInvocation === invocation) {\n      currentInvocation = null;\n    }\n\n    invocation.job.emit('canceled', invocation.fireDate);\n    prepareNextInvocation();\n  }\n}\n\n/* Recurrence scheduler */\nfunction scheduleNextRecurrence(rule, job, prevDate, endDate) {\n\n  prevDate = (prevDate instanceof CronDate) ? prevDate : new CronDate();\n\n  var date = (rule instanceof RecurrenceRule) ? rule._nextInvocationDate(prevDate) : rule.next();\n  if (date === null) {\n    return null;\n  }\n\n  if ((endDate instanceof CronDate) && date.getTime() > endDate.getTime()) {\n    return null;\n  }\n\n  var inv = new Invocation(job, date, rule, endDate);\n  scheduleInvocation(inv);\n\n  return inv;\n}\n\n/* Convenience methods */\nfunction scheduleJob() {\n  if (arguments.length < 2) {\n    return null;\n  }\n\n  var name = (arguments.length >= 3 && typeof arguments[0] === 'string') ? arguments[0] : null;\n  var spec = name ? arguments[1] : arguments[0];\n  var method = name ? arguments[2] : arguments[1];\n  var callback = name ? arguments[3] : arguments[2];\n\n  var job = new Job(name, method, callback);\n\n  if (job.schedule(spec)) {\n    return job;\n  }\n\n  return null;\n}\n\nfunction rescheduleJob(job, spec) {\n  if (job instanceof Job) {\n    if (job.reschedule(spec)) {\n      return job;\n    }\n  } else if (typeof job == 'string' || job instanceof String) {\n    if (job in scheduledJobs && scheduledJobs.hasOwnProperty(job)) {\n      if (scheduledJobs[job].reschedule(spec)) {\n        return scheduledJobs[job];\n      }\n    }\n  }\n  return null;\n}\n\nfunction cancelJob(job) {\n  var success = false;\n  if (job instanceof Job) {\n    success = job.cancel();\n  } else if (typeof job == 'string' || job instanceof String) {\n    if (job in scheduledJobs && scheduledJobs.hasOwnProperty(job)) {\n      success = scheduledJobs[job].cancel();\n    }\n  }\n\n  return success;\n}\n\n/* Public API */\nmodule.exports.Job = Job;\nmodule.exports.Range = Range;\nmodule.exports.RecurrenceRule = RecurrenceRule;\nmodule.exports.Invocation = Invocation;\nmodule.exports.scheduleJob = scheduleJob;\nmodule.exports.rescheduleJob = rescheduleJob;\nmodule.exports.scheduledJobs = scheduledJobs;\nmodule.exports.cancelJob = cancelJob;\n"]},"metadata":{},"sourceType":"script"}